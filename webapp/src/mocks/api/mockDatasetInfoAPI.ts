import { rest } from "msw";
import { DatasetInfoResponse } from "types/api";

const baseUrl = "http://localhost/api/local";
export const getDatasetInfo = rest.get(
  `${baseUrl}/dataset_info`,
  (req, res, ctx) => {
    const datasetInfoResponse: DatasetInfoResponse = {
      projectName: "CLINC Dummy",
      classNames: [
        "freeze_account",
        "routing",
        "pin_change",
        "bill_due",
        "pay_bill",
        "account_blocked",
        "interest_rate",
        "min_payment",
        "bill_balance",
        "transfer",
        "order_checks",
        "balance",
        "spending_history",
        "transactions",
        "report_fraud",
        "NO_INTENT",
      ],
      dataActions: [
        "relabel",
        "consider_new_class",
        "remove",
        "augment_with_similar",
        "investigate",
        "NO_ACTION",
      ],
      smartTags: [
        "multiple_sentences",
        "long_sentence",
        "short_sentence",
        "missing_subj",
        "missing_obj",
        "missing_verb",
        "conflicting_neighbors_train",
        "conflicting_neighbors_eval",
        "no_close_train",
        "no_close_eval",
        "failed_punctuation",
        "failed_fuzzy_matching",
        "high_epistemic_uncertainty",
        "correct_top_3",
        "correct_low_conf",
        "incorrect_for_all_pipelines",
        "pipeline_disagreement",
        "NO_SMART_TAGS",
      ],
      evalClassDistribution: [3, 0, 0, 5, 1, 3, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4],
      trainClassDistribution: [2, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 3],
      startupTasks: {
        syntax_tags_eval_None: "not_started",
        syntax_tags_train_None: "not_started",
        prediction_eval_0: "not_started",
        prediction_train_0: "not_started",
        saliency_eval_0: "not_started",
        saliency_train_0: "not_started",
        outcome_count_eval_0: "not_started",
        outcome_count_train_0: "not_started",
        confidence_bins_eval_0: "not_started",
        confidence_bins_train_0: "not_started",
        metrics_by_filter_eval_0: "not_started",
        metrics_by_filter_train_0: "not_started",
        perturbation_testing_eval_0: "not_started",
        perturbation_testing_train_0: "not_started",
        neighbors_tags_eval_None: "not_started",
        neighbors_tags_train_None: "not_started",
        outcome_count_per_threshold_eval_0: "not_started",
      },
      modelContract: "hf_text_classification",
      predictionAvailable: true,
      perturbationTestingAvailable: true,
      availableDatasetSplits: {
        train: true,
        eval: true,
      },
      similarityAvailable: true,
      postprocessingEditable: [true],
    };
    return res(ctx.json(datasetInfoResponse));
  }
);

export const getDatasetInfoWithoutEvaluationSplit = rest.get(
  `${baseUrl}/dataset_info`,
  (req, res, ctx) => {
    const datasetInfoResponse: DatasetInfoResponse = {
      projectName: "CLINC Dummy",
      classNames: [
        "freeze_account",
        "routing",
        "pin_change",
        "bill_due",
        "pay_bill",
        "account_blocked",
        "interest_rate",
        "min_payment",
        "bill_balance",
        "transfer",
        "order_checks",
        "balance",
        "spending_history",
        "transactions",
        "report_fraud",
        "NO_INTENT",
      ],
      dataActions: [
        "relabel",
        "consider_new_class",
        "remove",
        "augment_with_similar",
        "investigate",
        "NO_ACTION",
      ],
      smartTags: [
        "multiple_sentences",
        "long_sentence",
        "short_sentence",
        "missing_subj",
        "missing_obj",
        "missing_verb",
        "conflicting_neighbors_train",
        "conflicting_neighbors_eval",
        "no_close_train",
        "no_close_eval",
        "failed_punctuation",
        "failed_fuzzy_matching",
        "high_epistemic_uncertainty",
        "correct_top_3",
        "correct_low_conf",
        "incorrect_for_all_pipelines",
        "pipeline_disagreement",
        "NO_SMART_TAGS",
      ],
      evalClassDistribution: [3, 0, 0, 5, 1, 3, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4],
      trainClassDistribution: [2, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 3],
      startupTasks: {
        syntax_tags_eval_None: "not_started",
        syntax_tags_train_None: "not_started",
        prediction_eval_0: "not_started",
        prediction_train_0: "not_started",
        saliency_eval_0: "not_started",
        saliency_train_0: "not_started",
        outcome_count_eval_0: "not_started",
        outcome_count_train_0: "not_started",
        confidence_bins_eval_0: "not_started",
        confidence_bins_train_0: "not_started",
        metrics_by_filter_eval_0: "not_started",
        metrics_by_filter_train_0: "not_started",
        perturbation_testing_eval_0: "not_started",
        perturbation_testing_train_0: "not_started",
        neighbors_tags_eval_None: "not_started",
        neighbors_tags_train_None: "not_started",
        outcome_count_per_threshold_eval_0: "not_started",
      },
      modelContract: "hf_text_classification",
      predictionAvailable: true,
      perturbationTestingAvailable: true,
      availableDatasetSplits: {
        train: true,
        eval: false,
      },
      similarityAvailable: true,
      postprocessingEditable: [true],
    };
    return res(ctx.json(datasetInfoResponse));
  }
);

export const getDatasetInfoWithoutTrainSplit = rest.get(
  `${baseUrl}/dataset_info`,
  (req, res, ctx) => {
    const datasetInfoResponse: DatasetInfoResponse = {
      projectName: "CLINC Dummy",
      classNames: [
        "freeze_account",
        "routing",
        "pin_change",
        "bill_due",
        "pay_bill",
        "account_blocked",
        "interest_rate",
        "min_payment",
        "bill_balance",
        "transfer",
        "order_checks",
        "balance",
        "spending_history",
        "transactions",
        "report_fraud",
        "NO_INTENT",
      ],
      dataActions: [
        "relabel",
        "consider_new_class",
        "remove",
        "augment_with_similar",
        "investigate",
        "NO_ACTION",
      ],
      smartTags: [
        "multiple_sentences",
        "long_sentence",
        "short_sentence",
        "missing_subj",
        "missing_obj",
        "missing_verb",
        "conflicting_neighbors_train",
        "conflicting_neighbors_eval",
        "no_close_train",
        "no_close_eval",
        "failed_punctuation",
        "failed_fuzzy_matching",
        "high_epistemic_uncertainty",
        "correct_top_3",
        "correct_low_conf",
        "incorrect_for_all_pipelines",
        "pipeline_disagreement",
        "NO_SMART_TAGS",
      ],
      evalClassDistribution: [3, 0, 0, 5, 1, 3, 0, 0, 2, 0, 0, 1, 2, 2, 0, 4],
      trainClassDistribution: [2, 0, 0, 3, 2, 0, 0, 0, 0, 2, 0, 0, 3, 2, 0, 3],
      startupTasks: {
        syntax_tags_eval_None: "not_started",
        syntax_tags_train_None: "not_started",
        prediction_eval_0: "not_started",
        prediction_train_0: "not_started",
        saliency_eval_0: "not_started",
        saliency_train_0: "not_started",
        outcome_count_eval_0: "not_started",
        outcome_count_train_0: "not_started",
        confidence_bins_eval_0: "not_started",
        confidence_bins_train_0: "not_started",
        metrics_by_filter_eval_0: "not_started",
        metrics_by_filter_train_0: "not_started",
        perturbation_testing_eval_0: "not_started",
        perturbation_testing_train_0: "not_started",
        neighbors_tags_eval_None: "not_started",
        neighbors_tags_train_None: "not_started",
        outcome_count_per_threshold_eval_0: "not_started",
      },
      modelContract: "hf_text_classification",
      predictionAvailable: true,
      perturbationTestingAvailable: true,
      availableDatasetSplits: {
        train: false,
        eval: true,
      },
      similarityAvailable: true,
      postprocessingEditable: [true],
    };
    return res(ctx.json(datasetInfoResponse));
  }
);
